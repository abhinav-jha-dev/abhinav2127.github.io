{"version":3,"sources":["components/basic/socialcontacts.jsx","components/basic/profiledetail.jsx","App.js","serviceWorker.js","index.js"],"names":["SocialContact","socialContacts","Data","socialDetails","style","color","verticalAlign","href","githubURL","alt","src","linkedInURL","email","ProfileDetail","profileInfo","commonDetails","Card","Img","variant","profileImageUrl","Body","className","Text","role","name","App","Container","fluid","Row","Col","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2wBA0BeA,MAtBf,WACI,IAAIC,EAAiBC,EAAKC,cAC1B,OACI,oCACI,uBAAGC,MAAO,CAAEC,MAAO,OAAQC,cAAe,QAA1C,iBAGA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMC,KAAMN,EAAeO,WACvB,yBAAKC,IAAI,SAASC,IAAI,kDAE1B,kBAAC,IAAD,CAAMH,KAAMN,EAAeU,aACvB,yBAAKF,IAAI,WAAWC,IAAI,6DAE5B,kBAAC,IAAD,CAAMH,KAAM,UAAYN,EAAeW,OACnC,yBAAKH,IAAI,UAAUC,IAAI,gECU5BG,MAtBf,WACI,IAAIC,EAAcZ,EAAKa,cACvB,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMR,IAAKI,EAAYK,kBACzC,kBAACH,EAAA,EAAKI,KAAN,CAAWC,UAAW,UAClB,kBAACL,EAAA,EAAKM,KAAN,CAAWlB,MAAO,CAAE,SAAY,SAC5B,kBAAC,IAAD,CAAQM,IAAI,mEADhB,WAGA,0BAAMN,MAAO,CAAE,cAAiB,WAAaU,EAAYS,SAIjE,wBAAIF,UAAW,cACVP,EAAYU,MAEjB,kBAAC,EAAD,QCHGC,MAff,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,MAChB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,OAEF,kBAACD,EAAA,EAAD,iBCDYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9e10b14.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AvatarStack, Link } from '@primer/components';\r\nimport Data from '../../data/db.json'\r\n\r\nfunction SocialContact() {\r\n    let socialContacts = Data.socialDetails;\r\n    return (\r\n        <>\r\n            <i style={{ color: \"#666\", verticalAlign: \"top\" }}>\r\n                Shout at &nbsp;\r\n        </i>\r\n            <AvatarStack>\r\n                <Link href={socialContacts.githubURL}>\r\n                    <img alt=\"GitHub\" src=\"https://avatars.githubusercontent.com/github\" />\r\n                </Link>\r\n                <Link href={socialContacts.linkedInURL}>\r\n                    <img alt=\"LinkedIn\" src=\"https://image.flaticon.com/icons/png/512/174/174857.png\" />\r\n                </Link>\r\n                <Link href={\"mailto:\" + socialContacts.email}>\r\n                    <img alt=\"Mail To\" src=\"https://image.flaticon.com/icons/png/512/281/281769.png\" />\r\n                </Link>\r\n            </AvatarStack>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SocialContact;","import React from 'react';\r\nimport Data from '../../data/db.json'\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Avatar, AvatarStack, Link } from '@primer/components';\r\nimport SocialContact from './socialcontacts';\r\n\r\nfunction ProfileDetail() {\r\n    let profileInfo = Data.commonDetails;\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Img variant=\"top\" src={profileInfo.profileImageUrl} />\r\n                <Card.Body className={'pad-xs'}>\r\n                    <Card.Text style={{ \"fontSize\": \"12px\" }}>\r\n                        <Avatar src=\"https://github.githubassets.com/images/icons/emoji/octocat.png\" />\r\n                    &nbsp;&nbsp;\r\n                    <span style={{ \"verticalAlign\": \"middle\" }}>{profileInfo.role}</span>\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n            <h3 className={\"mar-top-sm\"}>\r\n                {profileInfo.name}\r\n            </h3>\r\n            <SocialContact></SocialContact>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProfileDetail;","import React from 'react';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport ProfileDetail from './components/basic/profiledetail';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Container fluid={'xl'}>\n      <Row>\n        <Col xs={4}>\n          <ProfileDetail></ProfileDetail>\n        </Col>\n        <Col>\n          Col 2\n       </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}